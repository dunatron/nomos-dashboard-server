# source: https://us1.prisma.sh/heath-dunlop-37e897/nomos-dashboard-db/dev
# timestamp: Fri Dec 14 2018 10:42:12 GMT+1300 (NZDT)

type AggregateAnswer {
  count: Int!
}

type AggregateAnswerLink {
  count: Int!
}

type AggregateAnswerNote {
  count: Int!
}

type AggregateCodeLink {
  count: Int!
}

type AggregateCodeSnippet {
  count: Int!
}

type AggregateCodeTag {
  count: Int!
}

type AggregateLeave {
  count: Int!
}

type AggregateQuestion {
  count: Int!
}

type AggregateQuestionLink {
  count: Int!
}

type AggregateQuestionNote {
  count: Int!
}

type AggregateStandupDetail {
  count: Int!
}

type AggregateTag {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Answer implements Node {
  id: ID!
  question: Question
  response: String!
  notes(where: AnswerNoteWhereInput, orderBy: AnswerNoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AnswerNote!]
  links(where: AnswerLinkWhereInput, orderBy: AnswerLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AnswerLink!]
}

"""A connection to a list of items."""
type AnswerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AnswerEdge]!
  aggregate: AggregateAnswer!
}

input AnswerCreateInput {
  response: String!
  question: QuestionCreateOneWithoutAnswersInput
  notes: AnswerNoteCreateManyWithoutAnswerInput
  links: AnswerLinkCreateManyWithoutAnswersInput
}

input AnswerCreateManyWithoutLinksInput {
  create: [AnswerCreateWithoutLinksInput!]
  connect: [AnswerWhereUniqueInput!]
}

input AnswerCreateManyWithoutQuestionInput {
  create: [AnswerCreateWithoutQuestionInput!]
  connect: [AnswerWhereUniqueInput!]
}

input AnswerCreateOneWithoutNotesInput {
  create: AnswerCreateWithoutNotesInput
  connect: AnswerWhereUniqueInput
}

input AnswerCreateWithoutLinksInput {
  response: String!
  question: QuestionCreateOneWithoutAnswersInput
  notes: AnswerNoteCreateManyWithoutAnswerInput
}

input AnswerCreateWithoutNotesInput {
  response: String!
  question: QuestionCreateOneWithoutAnswersInput
  links: AnswerLinkCreateManyWithoutAnswersInput
}

input AnswerCreateWithoutQuestionInput {
  response: String!
  notes: AnswerNoteCreateManyWithoutAnswerInput
  links: AnswerLinkCreateManyWithoutAnswersInput
}

"""An edge in a connection."""
type AnswerEdge {
  """The item at the end of the edge."""
  node: Answer!

  """A cursor for use in pagination."""
  cursor: String!
}

type AnswerLink implements Node {
  id: ID!
  name: String!
  url: String!
  answers(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Answer!]
}

"""A connection to a list of items."""
type AnswerLinkConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AnswerLinkEdge]!
  aggregate: AggregateAnswerLink!
}

input AnswerLinkCreateInput {
  name: String!
  url: String!
  answers: AnswerCreateManyWithoutLinksInput
}

input AnswerLinkCreateManyWithoutAnswersInput {
  create: [AnswerLinkCreateWithoutAnswersInput!]
  connect: [AnswerLinkWhereUniqueInput!]
}

input AnswerLinkCreateWithoutAnswersInput {
  name: String!
  url: String!
}

"""An edge in a connection."""
type AnswerLinkEdge {
  """The item at the end of the edge."""
  node: AnswerLink!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AnswerLinkOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  url_ASC
  url_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AnswerLinkPreviousValues {
  id: ID!
  name: String!
  url: String!
}

input AnswerLinkScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AnswerLinkScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnswerLinkScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnswerLinkScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
}

type AnswerLinkSubscriptionPayload {
  mutation: MutationType!
  node: AnswerLink
  updatedFields: [String!]
  previousValues: AnswerLinkPreviousValues
}

input AnswerLinkSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AnswerLinkSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnswerLinkSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnswerLinkSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AnswerLinkWhereInput
}

input AnswerLinkUpdateInput {
  name: String
  url: String
  answers: AnswerUpdateManyWithoutLinksInput
}

input AnswerLinkUpdateManyDataInput {
  name: String
  url: String
}

input AnswerLinkUpdateManyMutationInput {
  name: String
  url: String
}

input AnswerLinkUpdateManyWithoutAnswersInput {
  create: [AnswerLinkCreateWithoutAnswersInput!]
  connect: [AnswerLinkWhereUniqueInput!]
  disconnect: [AnswerLinkWhereUniqueInput!]
  delete: [AnswerLinkWhereUniqueInput!]
  update: [AnswerLinkUpdateWithWhereUniqueWithoutAnswersInput!]
  updateMany: [AnswerLinkUpdateManyWithWhereNestedInput!]
  deleteMany: [AnswerLinkScalarWhereInput!]
  upsert: [AnswerLinkUpsertWithWhereUniqueWithoutAnswersInput!]
}

input AnswerLinkUpdateManyWithWhereNestedInput {
  where: AnswerLinkScalarWhereInput!
  data: AnswerLinkUpdateManyDataInput!
}

input AnswerLinkUpdateWithoutAnswersDataInput {
  name: String
  url: String
}

input AnswerLinkUpdateWithWhereUniqueWithoutAnswersInput {
  where: AnswerLinkWhereUniqueInput!
  data: AnswerLinkUpdateWithoutAnswersDataInput!
}

input AnswerLinkUpsertWithWhereUniqueWithoutAnswersInput {
  where: AnswerLinkWhereUniqueInput!
  update: AnswerLinkUpdateWithoutAnswersDataInput!
  create: AnswerLinkCreateWithoutAnswersInput!
}

input AnswerLinkWhereInput {
  """Logical AND on all given filters."""
  AND: [AnswerLinkWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnswerLinkWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnswerLinkWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  answers_every: AnswerWhereInput
  answers_some: AnswerWhereInput
  answers_none: AnswerWhereInput
}

input AnswerLinkWhereUniqueInput {
  id: ID
}

type AnswerNote implements Node {
  id: ID!
  content: String!
  answer: Answer
}

"""A connection to a list of items."""
type AnswerNoteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AnswerNoteEdge]!
  aggregate: AggregateAnswerNote!
}

input AnswerNoteCreateInput {
  content: String!
  answer: AnswerCreateOneWithoutNotesInput
}

input AnswerNoteCreateManyWithoutAnswerInput {
  create: [AnswerNoteCreateWithoutAnswerInput!]
  connect: [AnswerNoteWhereUniqueInput!]
}

input AnswerNoteCreateWithoutAnswerInput {
  content: String!
}

"""An edge in a connection."""
type AnswerNoteEdge {
  """The item at the end of the edge."""
  node: AnswerNote!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AnswerNoteOrderByInput {
  id_ASC
  id_DESC
  content_ASC
  content_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AnswerNotePreviousValues {
  id: ID!
  content: String!
}

input AnswerNoteScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AnswerNoteScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnswerNoteScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnswerNoteScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
}

type AnswerNoteSubscriptionPayload {
  mutation: MutationType!
  node: AnswerNote
  updatedFields: [String!]
  previousValues: AnswerNotePreviousValues
}

input AnswerNoteSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AnswerNoteSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnswerNoteSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnswerNoteSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AnswerNoteWhereInput
}

input AnswerNoteUpdateInput {
  content: String
  answer: AnswerUpdateOneWithoutNotesInput
}

input AnswerNoteUpdateManyDataInput {
  content: String
}

input AnswerNoteUpdateManyMutationInput {
  content: String
}

input AnswerNoteUpdateManyWithoutAnswerInput {
  create: [AnswerNoteCreateWithoutAnswerInput!]
  connect: [AnswerNoteWhereUniqueInput!]
  disconnect: [AnswerNoteWhereUniqueInput!]
  delete: [AnswerNoteWhereUniqueInput!]
  update: [AnswerNoteUpdateWithWhereUniqueWithoutAnswerInput!]
  updateMany: [AnswerNoteUpdateManyWithWhereNestedInput!]
  deleteMany: [AnswerNoteScalarWhereInput!]
  upsert: [AnswerNoteUpsertWithWhereUniqueWithoutAnswerInput!]
}

input AnswerNoteUpdateManyWithWhereNestedInput {
  where: AnswerNoteScalarWhereInput!
  data: AnswerNoteUpdateManyDataInput!
}

input AnswerNoteUpdateWithoutAnswerDataInput {
  content: String
}

input AnswerNoteUpdateWithWhereUniqueWithoutAnswerInput {
  where: AnswerNoteWhereUniqueInput!
  data: AnswerNoteUpdateWithoutAnswerDataInput!
}

input AnswerNoteUpsertWithWhereUniqueWithoutAnswerInput {
  where: AnswerNoteWhereUniqueInput!
  update: AnswerNoteUpdateWithoutAnswerDataInput!
  create: AnswerNoteCreateWithoutAnswerInput!
}

input AnswerNoteWhereInput {
  """Logical AND on all given filters."""
  AND: [AnswerNoteWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnswerNoteWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnswerNoteWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  answer: AnswerWhereInput
}

input AnswerNoteWhereUniqueInput {
  id: ID
}

enum AnswerOrderByInput {
  id_ASC
  id_DESC
  response_ASC
  response_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AnswerPreviousValues {
  id: ID!
  response: String!
}

input AnswerScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AnswerScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnswerScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnswerScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  response: String

  """All values that are not equal to given value."""
  response_not: String

  """All values that are contained in given list."""
  response_in: [String!]

  """All values that are not contained in given list."""
  response_not_in: [String!]

  """All values less than the given value."""
  response_lt: String

  """All values less than or equal the given value."""
  response_lte: String

  """All values greater than the given value."""
  response_gt: String

  """All values greater than or equal the given value."""
  response_gte: String

  """All values containing the given string."""
  response_contains: String

  """All values not containing the given string."""
  response_not_contains: String

  """All values starting with the given string."""
  response_starts_with: String

  """All values not starting with the given string."""
  response_not_starts_with: String

  """All values ending with the given string."""
  response_ends_with: String

  """All values not ending with the given string."""
  response_not_ends_with: String
}

type AnswerSubscriptionPayload {
  mutation: MutationType!
  node: Answer
  updatedFields: [String!]
  previousValues: AnswerPreviousValues
}

input AnswerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AnswerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnswerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnswerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AnswerWhereInput
}

input AnswerUpdateInput {
  response: String
  question: QuestionUpdateOneWithoutAnswersInput
  notes: AnswerNoteUpdateManyWithoutAnswerInput
  links: AnswerLinkUpdateManyWithoutAnswersInput
}

input AnswerUpdateManyDataInput {
  response: String
}

input AnswerUpdateManyMutationInput {
  response: String
}

input AnswerUpdateManyWithoutLinksInput {
  create: [AnswerCreateWithoutLinksInput!]
  connect: [AnswerWhereUniqueInput!]
  disconnect: [AnswerWhereUniqueInput!]
  delete: [AnswerWhereUniqueInput!]
  update: [AnswerUpdateWithWhereUniqueWithoutLinksInput!]
  updateMany: [AnswerUpdateManyWithWhereNestedInput!]
  deleteMany: [AnswerScalarWhereInput!]
  upsert: [AnswerUpsertWithWhereUniqueWithoutLinksInput!]
}

input AnswerUpdateManyWithoutQuestionInput {
  create: [AnswerCreateWithoutQuestionInput!]
  connect: [AnswerWhereUniqueInput!]
  disconnect: [AnswerWhereUniqueInput!]
  delete: [AnswerWhereUniqueInput!]
  update: [AnswerUpdateWithWhereUniqueWithoutQuestionInput!]
  updateMany: [AnswerUpdateManyWithWhereNestedInput!]
  deleteMany: [AnswerScalarWhereInput!]
  upsert: [AnswerUpsertWithWhereUniqueWithoutQuestionInput!]
}

input AnswerUpdateManyWithWhereNestedInput {
  where: AnswerScalarWhereInput!
  data: AnswerUpdateManyDataInput!
}

input AnswerUpdateOneWithoutNotesInput {
  create: AnswerCreateWithoutNotesInput
  connect: AnswerWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AnswerUpdateWithoutNotesDataInput
  upsert: AnswerUpsertWithoutNotesInput
}

input AnswerUpdateWithoutLinksDataInput {
  response: String
  question: QuestionUpdateOneWithoutAnswersInput
  notes: AnswerNoteUpdateManyWithoutAnswerInput
}

input AnswerUpdateWithoutNotesDataInput {
  response: String
  question: QuestionUpdateOneWithoutAnswersInput
  links: AnswerLinkUpdateManyWithoutAnswersInput
}

input AnswerUpdateWithoutQuestionDataInput {
  response: String
  notes: AnswerNoteUpdateManyWithoutAnswerInput
  links: AnswerLinkUpdateManyWithoutAnswersInput
}

input AnswerUpdateWithWhereUniqueWithoutLinksInput {
  where: AnswerWhereUniqueInput!
  data: AnswerUpdateWithoutLinksDataInput!
}

input AnswerUpdateWithWhereUniqueWithoutQuestionInput {
  where: AnswerWhereUniqueInput!
  data: AnswerUpdateWithoutQuestionDataInput!
}

input AnswerUpsertWithoutNotesInput {
  update: AnswerUpdateWithoutNotesDataInput!
  create: AnswerCreateWithoutNotesInput!
}

input AnswerUpsertWithWhereUniqueWithoutLinksInput {
  where: AnswerWhereUniqueInput!
  update: AnswerUpdateWithoutLinksDataInput!
  create: AnswerCreateWithoutLinksInput!
}

input AnswerUpsertWithWhereUniqueWithoutQuestionInput {
  where: AnswerWhereUniqueInput!
  update: AnswerUpdateWithoutQuestionDataInput!
  create: AnswerCreateWithoutQuestionInput!
}

input AnswerWhereInput {
  """Logical AND on all given filters."""
  AND: [AnswerWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnswerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnswerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  response: String

  """All values that are not equal to given value."""
  response_not: String

  """All values that are contained in given list."""
  response_in: [String!]

  """All values that are not contained in given list."""
  response_not_in: [String!]

  """All values less than the given value."""
  response_lt: String

  """All values less than or equal the given value."""
  response_lte: String

  """All values greater than the given value."""
  response_gt: String

  """All values greater than or equal the given value."""
  response_gte: String

  """All values containing the given string."""
  response_contains: String

  """All values not containing the given string."""
  response_not_contains: String

  """All values starting with the given string."""
  response_starts_with: String

  """All values not starting with the given string."""
  response_not_starts_with: String

  """All values ending with the given string."""
  response_ends_with: String

  """All values not ending with the given string."""
  response_not_ends_with: String
  question: QuestionWhereInput
  notes_every: AnswerNoteWhereInput
  notes_some: AnswerNoteWhereInput
  notes_none: AnswerNoteWhereInput
  links_every: AnswerLinkWhereInput
  links_some: AnswerLinkWhereInput
  links_none: AnswerLinkWhereInput
}

input AnswerWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type CodeLink implements Node {
  id: ID!
  name: String
  url: String
}

"""A connection to a list of items."""
type CodeLinkConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CodeLinkEdge]!
  aggregate: AggregateCodeLink!
}

input CodeLinkCreateInput {
  name: String
  url: String
}

input CodeLinkCreateManyInput {
  create: [CodeLinkCreateInput!]
  connect: [CodeLinkWhereUniqueInput!]
}

"""An edge in a connection."""
type CodeLinkEdge {
  """The item at the end of the edge."""
  node: CodeLink!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CodeLinkOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  url_ASC
  url_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CodeLinkPreviousValues {
  id: ID!
  name: String
  url: String
}

input CodeLinkScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CodeLinkScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CodeLinkScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CodeLinkScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
}

type CodeLinkSubscriptionPayload {
  mutation: MutationType!
  node: CodeLink
  updatedFields: [String!]
  previousValues: CodeLinkPreviousValues
}

input CodeLinkSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CodeLinkSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CodeLinkSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CodeLinkSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CodeLinkWhereInput
}

input CodeLinkUpdateDataInput {
  name: String
  url: String
}

input CodeLinkUpdateInput {
  name: String
  url: String
}

input CodeLinkUpdateManyDataInput {
  name: String
  url: String
}

input CodeLinkUpdateManyInput {
  create: [CodeLinkCreateInput!]
  connect: [CodeLinkWhereUniqueInput!]
  disconnect: [CodeLinkWhereUniqueInput!]
  delete: [CodeLinkWhereUniqueInput!]
  update: [CodeLinkUpdateWithWhereUniqueNestedInput!]
  updateMany: [CodeLinkUpdateManyWithWhereNestedInput!]
  deleteMany: [CodeLinkScalarWhereInput!]
  upsert: [CodeLinkUpsertWithWhereUniqueNestedInput!]
}

input CodeLinkUpdateManyMutationInput {
  name: String
  url: String
}

input CodeLinkUpdateManyWithWhereNestedInput {
  where: CodeLinkScalarWhereInput!
  data: CodeLinkUpdateManyDataInput!
}

input CodeLinkUpdateWithWhereUniqueNestedInput {
  where: CodeLinkWhereUniqueInput!
  data: CodeLinkUpdateDataInput!
}

input CodeLinkUpsertWithWhereUniqueNestedInput {
  where: CodeLinkWhereUniqueInput!
  update: CodeLinkUpdateDataInput!
  create: CodeLinkCreateInput!
}

input CodeLinkWhereInput {
  """Logical AND on all given filters."""
  AND: [CodeLinkWhereInput!]

  """Logical OR on all given filters."""
  OR: [CodeLinkWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CodeLinkWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
}

input CodeLinkWhereUniqueInput {
  id: ID
}

type CodeSnippet implements Node {
  id: ID!
  createdAt: DateTime!
  name: String!
  content: String!
  note: String
  tags(where: CodeTagWhereInput, orderBy: CodeTagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CodeTag!]
  links(where: CodeLinkWhereInput, orderBy: CodeLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CodeLink!]
}

"""A connection to a list of items."""
type CodeSnippetConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CodeSnippetEdge]!
  aggregate: AggregateCodeSnippet!
}

input CodeSnippetCreateInput {
  name: String!
  content: String!
  note: String
  tags: CodeTagCreateManyInput
  links: CodeLinkCreateManyInput
}

"""An edge in a connection."""
type CodeSnippetEdge {
  """The item at the end of the edge."""
  node: CodeSnippet!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CodeSnippetOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  content_ASC
  content_DESC
  note_ASC
  note_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CodeSnippetPreviousValues {
  id: ID!
  createdAt: DateTime!
  name: String!
  content: String!
  note: String
}

type CodeSnippetSubscriptionPayload {
  mutation: MutationType!
  node: CodeSnippet
  updatedFields: [String!]
  previousValues: CodeSnippetPreviousValues
}

input CodeSnippetSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CodeSnippetSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CodeSnippetSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CodeSnippetSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CodeSnippetWhereInput
}

input CodeSnippetUpdateInput {
  name: String
  content: String
  note: String
  tags: CodeTagUpdateManyInput
  links: CodeLinkUpdateManyInput
}

input CodeSnippetUpdateManyMutationInput {
  name: String
  content: String
  note: String
}

input CodeSnippetWhereInput {
  """Logical AND on all given filters."""
  AND: [CodeSnippetWhereInput!]

  """Logical OR on all given filters."""
  OR: [CodeSnippetWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CodeSnippetWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  note: String

  """All values that are not equal to given value."""
  note_not: String

  """All values that are contained in given list."""
  note_in: [String!]

  """All values that are not contained in given list."""
  note_not_in: [String!]

  """All values less than the given value."""
  note_lt: String

  """All values less than or equal the given value."""
  note_lte: String

  """All values greater than the given value."""
  note_gt: String

  """All values greater than or equal the given value."""
  note_gte: String

  """All values containing the given string."""
  note_contains: String

  """All values not containing the given string."""
  note_not_contains: String

  """All values starting with the given string."""
  note_starts_with: String

  """All values not starting with the given string."""
  note_not_starts_with: String

  """All values ending with the given string."""
  note_ends_with: String

  """All values not ending with the given string."""
  note_not_ends_with: String
  tags_every: CodeTagWhereInput
  tags_some: CodeTagWhereInput
  tags_none: CodeTagWhereInput
  links_every: CodeLinkWhereInput
  links_some: CodeLinkWhereInput
  links_none: CodeLinkWhereInput
}

input CodeSnippetWhereUniqueInput {
  id: ID
  name: String
}

type CodeTag {
  name: String!
}

"""A connection to a list of items."""
type CodeTagConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CodeTagEdge]!
  aggregate: AggregateCodeTag!
}

input CodeTagCreateInput {
  name: String!
}

input CodeTagCreateManyInput {
  create: [CodeTagCreateInput!]
  connect: [CodeTagWhereUniqueInput!]
}

"""An edge in a connection."""
type CodeTagEdge {
  """The item at the end of the edge."""
  node: CodeTag!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CodeTagOrderByInput {
  name_ASC
  name_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CodeTagPreviousValues {
  name: String!
}

input CodeTagScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CodeTagScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CodeTagScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CodeTagScalarWhereInput!]
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type CodeTagSubscriptionPayload {
  mutation: MutationType!
  node: CodeTag
  updatedFields: [String!]
  previousValues: CodeTagPreviousValues
}

input CodeTagSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CodeTagSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CodeTagSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CodeTagSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CodeTagWhereInput
}

input CodeTagUpdateDataInput {
  name: String
}

input CodeTagUpdateInput {
  name: String
}

input CodeTagUpdateManyDataInput {
  name: String
}

input CodeTagUpdateManyInput {
  create: [CodeTagCreateInput!]
  connect: [CodeTagWhereUniqueInput!]
  disconnect: [CodeTagWhereUniqueInput!]
  delete: [CodeTagWhereUniqueInput!]
  update: [CodeTagUpdateWithWhereUniqueNestedInput!]
  updateMany: [CodeTagUpdateManyWithWhereNestedInput!]
  deleteMany: [CodeTagScalarWhereInput!]
  upsert: [CodeTagUpsertWithWhereUniqueNestedInput!]
}

input CodeTagUpdateManyMutationInput {
  name: String
}

input CodeTagUpdateManyWithWhereNestedInput {
  where: CodeTagScalarWhereInput!
  data: CodeTagUpdateManyDataInput!
}

input CodeTagUpdateWithWhereUniqueNestedInput {
  where: CodeTagWhereUniqueInput!
  data: CodeTagUpdateDataInput!
}

input CodeTagUpsertWithWhereUniqueNestedInput {
  where: CodeTagWhereUniqueInput!
  update: CodeTagUpdateDataInput!
  create: CodeTagCreateInput!
}

input CodeTagWhereInput {
  """Logical AND on all given filters."""
  AND: [CodeTagWhereInput!]

  """Logical OR on all given filters."""
  OR: [CodeTagWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CodeTagWhereInput!]
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input CodeTagWhereUniqueInput {
  name: String
}

scalar DateTime

type Leave implements Node {
  id: ID!
  status: LEAVE_STATUS!
  forUser: User
  createdAt: DateTime!
  lastDayOfWork: DateTime!
  firstDayOfLeave: DateTime!
  lastDayOfLeave: DateTime!
  firstDayOfWork: DateTime!
  daysOfLeave: Int!
  publicHolidays: Int!
  totalLeaveDays: Int!
  type: LEAVE_TYPE!
  notes: String
}

enum LEAVE_STATUS {
  ACCEPTED
  PENDING
  DENIED
}

enum LEAVE_TYPE {
  ANNUAL_LEAVE
  BEREAVEMENT_LEAVE
  PARENTAL_LEAVE
  PAID_PARENTAL_LEAVE
  SICK_LEAVE
  DOMESTIC_LEAVE
  SPECIAL_LEAVE
  LONG_SERVICE_LEAVE
  JURY_SERVICE
  ACCIDENT_COMPENSATION
  EMPLOYMENT_RELATIONS_EDUCATION
  CIVIL_DEFENCE_EMERGENCY
  MILITARY_SERVICE
}

"""A connection to a list of items."""
type LeaveConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LeaveEdge]!
  aggregate: AggregateLeave!
}

input LeaveCreateInput {
  status: LEAVE_STATUS
  lastDayOfWork: DateTime!
  firstDayOfLeave: DateTime!
  lastDayOfLeave: DateTime!
  firstDayOfWork: DateTime!
  daysOfLeave: Int!
  publicHolidays: Int!
  totalLeaveDays: Int!
  type: LEAVE_TYPE
  notes: String
  forUser: UserCreateOneWithoutAppliedLeaveInput
}

input LeaveCreateManyWithoutForUserInput {
  create: [LeaveCreateWithoutForUserInput!]
  connect: [LeaveWhereUniqueInput!]
}

input LeaveCreateWithoutForUserInput {
  status: LEAVE_STATUS
  lastDayOfWork: DateTime!
  firstDayOfLeave: DateTime!
  lastDayOfLeave: DateTime!
  firstDayOfWork: DateTime!
  daysOfLeave: Int!
  publicHolidays: Int!
  totalLeaveDays: Int!
  type: LEAVE_TYPE
  notes: String
}

"""An edge in a connection."""
type LeaveEdge {
  """The item at the end of the edge."""
  node: Leave!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LeaveOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  lastDayOfWork_ASC
  lastDayOfWork_DESC
  firstDayOfLeave_ASC
  firstDayOfLeave_DESC
  lastDayOfLeave_ASC
  lastDayOfLeave_DESC
  firstDayOfWork_ASC
  firstDayOfWork_DESC
  daysOfLeave_ASC
  daysOfLeave_DESC
  publicHolidays_ASC
  publicHolidays_DESC
  totalLeaveDays_ASC
  totalLeaveDays_DESC
  type_ASC
  type_DESC
  notes_ASC
  notes_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LeavePreviousValues {
  id: ID!
  status: LEAVE_STATUS!
  createdAt: DateTime!
  lastDayOfWork: DateTime!
  firstDayOfLeave: DateTime!
  lastDayOfLeave: DateTime!
  firstDayOfWork: DateTime!
  daysOfLeave: Int!
  publicHolidays: Int!
  totalLeaveDays: Int!
  type: LEAVE_TYPE!
  notes: String
}

input LeaveScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [LeaveScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [LeaveScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LeaveScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  status: LEAVE_STATUS

  """All values that are not equal to given value."""
  status_not: LEAVE_STATUS

  """All values that are contained in given list."""
  status_in: [LEAVE_STATUS!]

  """All values that are not contained in given list."""
  status_not_in: [LEAVE_STATUS!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  lastDayOfWork: DateTime

  """All values that are not equal to given value."""
  lastDayOfWork_not: DateTime

  """All values that are contained in given list."""
  lastDayOfWork_in: [DateTime!]

  """All values that are not contained in given list."""
  lastDayOfWork_not_in: [DateTime!]

  """All values less than the given value."""
  lastDayOfWork_lt: DateTime

  """All values less than or equal the given value."""
  lastDayOfWork_lte: DateTime

  """All values greater than the given value."""
  lastDayOfWork_gt: DateTime

  """All values greater than or equal the given value."""
  lastDayOfWork_gte: DateTime
  firstDayOfLeave: DateTime

  """All values that are not equal to given value."""
  firstDayOfLeave_not: DateTime

  """All values that are contained in given list."""
  firstDayOfLeave_in: [DateTime!]

  """All values that are not contained in given list."""
  firstDayOfLeave_not_in: [DateTime!]

  """All values less than the given value."""
  firstDayOfLeave_lt: DateTime

  """All values less than or equal the given value."""
  firstDayOfLeave_lte: DateTime

  """All values greater than the given value."""
  firstDayOfLeave_gt: DateTime

  """All values greater than or equal the given value."""
  firstDayOfLeave_gte: DateTime
  lastDayOfLeave: DateTime

  """All values that are not equal to given value."""
  lastDayOfLeave_not: DateTime

  """All values that are contained in given list."""
  lastDayOfLeave_in: [DateTime!]

  """All values that are not contained in given list."""
  lastDayOfLeave_not_in: [DateTime!]

  """All values less than the given value."""
  lastDayOfLeave_lt: DateTime

  """All values less than or equal the given value."""
  lastDayOfLeave_lte: DateTime

  """All values greater than the given value."""
  lastDayOfLeave_gt: DateTime

  """All values greater than or equal the given value."""
  lastDayOfLeave_gte: DateTime
  firstDayOfWork: DateTime

  """All values that are not equal to given value."""
  firstDayOfWork_not: DateTime

  """All values that are contained in given list."""
  firstDayOfWork_in: [DateTime!]

  """All values that are not contained in given list."""
  firstDayOfWork_not_in: [DateTime!]

  """All values less than the given value."""
  firstDayOfWork_lt: DateTime

  """All values less than or equal the given value."""
  firstDayOfWork_lte: DateTime

  """All values greater than the given value."""
  firstDayOfWork_gt: DateTime

  """All values greater than or equal the given value."""
  firstDayOfWork_gte: DateTime
  daysOfLeave: Int

  """All values that are not equal to given value."""
  daysOfLeave_not: Int

  """All values that are contained in given list."""
  daysOfLeave_in: [Int!]

  """All values that are not contained in given list."""
  daysOfLeave_not_in: [Int!]

  """All values less than the given value."""
  daysOfLeave_lt: Int

  """All values less than or equal the given value."""
  daysOfLeave_lte: Int

  """All values greater than the given value."""
  daysOfLeave_gt: Int

  """All values greater than or equal the given value."""
  daysOfLeave_gte: Int
  publicHolidays: Int

  """All values that are not equal to given value."""
  publicHolidays_not: Int

  """All values that are contained in given list."""
  publicHolidays_in: [Int!]

  """All values that are not contained in given list."""
  publicHolidays_not_in: [Int!]

  """All values less than the given value."""
  publicHolidays_lt: Int

  """All values less than or equal the given value."""
  publicHolidays_lte: Int

  """All values greater than the given value."""
  publicHolidays_gt: Int

  """All values greater than or equal the given value."""
  publicHolidays_gte: Int
  totalLeaveDays: Int

  """All values that are not equal to given value."""
  totalLeaveDays_not: Int

  """All values that are contained in given list."""
  totalLeaveDays_in: [Int!]

  """All values that are not contained in given list."""
  totalLeaveDays_not_in: [Int!]

  """All values less than the given value."""
  totalLeaveDays_lt: Int

  """All values less than or equal the given value."""
  totalLeaveDays_lte: Int

  """All values greater than the given value."""
  totalLeaveDays_gt: Int

  """All values greater than or equal the given value."""
  totalLeaveDays_gte: Int
  type: LEAVE_TYPE

  """All values that are not equal to given value."""
  type_not: LEAVE_TYPE

  """All values that are contained in given list."""
  type_in: [LEAVE_TYPE!]

  """All values that are not contained in given list."""
  type_not_in: [LEAVE_TYPE!]
  notes: String

  """All values that are not equal to given value."""
  notes_not: String

  """All values that are contained in given list."""
  notes_in: [String!]

  """All values that are not contained in given list."""
  notes_not_in: [String!]

  """All values less than the given value."""
  notes_lt: String

  """All values less than or equal the given value."""
  notes_lte: String

  """All values greater than the given value."""
  notes_gt: String

  """All values greater than or equal the given value."""
  notes_gte: String

  """All values containing the given string."""
  notes_contains: String

  """All values not containing the given string."""
  notes_not_contains: String

  """All values starting with the given string."""
  notes_starts_with: String

  """All values not starting with the given string."""
  notes_not_starts_with: String

  """All values ending with the given string."""
  notes_ends_with: String

  """All values not ending with the given string."""
  notes_not_ends_with: String
}

type LeaveSubscriptionPayload {
  mutation: MutationType!
  node: Leave
  updatedFields: [String!]
  previousValues: LeavePreviousValues
}

input LeaveSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LeaveSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LeaveSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LeaveSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LeaveWhereInput
}

input LeaveUpdateInput {
  status: LEAVE_STATUS
  lastDayOfWork: DateTime
  firstDayOfLeave: DateTime
  lastDayOfLeave: DateTime
  firstDayOfWork: DateTime
  daysOfLeave: Int
  publicHolidays: Int
  totalLeaveDays: Int
  type: LEAVE_TYPE
  notes: String
  forUser: UserUpdateOneWithoutAppliedLeaveInput
}

input LeaveUpdateManyDataInput {
  status: LEAVE_STATUS
  lastDayOfWork: DateTime
  firstDayOfLeave: DateTime
  lastDayOfLeave: DateTime
  firstDayOfWork: DateTime
  daysOfLeave: Int
  publicHolidays: Int
  totalLeaveDays: Int
  type: LEAVE_TYPE
  notes: String
}

input LeaveUpdateManyMutationInput {
  status: LEAVE_STATUS
  lastDayOfWork: DateTime
  firstDayOfLeave: DateTime
  lastDayOfLeave: DateTime
  firstDayOfWork: DateTime
  daysOfLeave: Int
  publicHolidays: Int
  totalLeaveDays: Int
  type: LEAVE_TYPE
  notes: String
}

input LeaveUpdateManyWithoutForUserInput {
  create: [LeaveCreateWithoutForUserInput!]
  connect: [LeaveWhereUniqueInput!]
  disconnect: [LeaveWhereUniqueInput!]
  delete: [LeaveWhereUniqueInput!]
  update: [LeaveUpdateWithWhereUniqueWithoutForUserInput!]
  updateMany: [LeaveUpdateManyWithWhereNestedInput!]
  deleteMany: [LeaveScalarWhereInput!]
  upsert: [LeaveUpsertWithWhereUniqueWithoutForUserInput!]
}

input LeaveUpdateManyWithWhereNestedInput {
  where: LeaveScalarWhereInput!
  data: LeaveUpdateManyDataInput!
}

input LeaveUpdateWithoutForUserDataInput {
  status: LEAVE_STATUS
  lastDayOfWork: DateTime
  firstDayOfLeave: DateTime
  lastDayOfLeave: DateTime
  firstDayOfWork: DateTime
  daysOfLeave: Int
  publicHolidays: Int
  totalLeaveDays: Int
  type: LEAVE_TYPE
  notes: String
}

input LeaveUpdateWithWhereUniqueWithoutForUserInput {
  where: LeaveWhereUniqueInput!
  data: LeaveUpdateWithoutForUserDataInput!
}

input LeaveUpsertWithWhereUniqueWithoutForUserInput {
  where: LeaveWhereUniqueInput!
  update: LeaveUpdateWithoutForUserDataInput!
  create: LeaveCreateWithoutForUserInput!
}

input LeaveWhereInput {
  """Logical AND on all given filters."""
  AND: [LeaveWhereInput!]

  """Logical OR on all given filters."""
  OR: [LeaveWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LeaveWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  status: LEAVE_STATUS

  """All values that are not equal to given value."""
  status_not: LEAVE_STATUS

  """All values that are contained in given list."""
  status_in: [LEAVE_STATUS!]

  """All values that are not contained in given list."""
  status_not_in: [LEAVE_STATUS!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  lastDayOfWork: DateTime

  """All values that are not equal to given value."""
  lastDayOfWork_not: DateTime

  """All values that are contained in given list."""
  lastDayOfWork_in: [DateTime!]

  """All values that are not contained in given list."""
  lastDayOfWork_not_in: [DateTime!]

  """All values less than the given value."""
  lastDayOfWork_lt: DateTime

  """All values less than or equal the given value."""
  lastDayOfWork_lte: DateTime

  """All values greater than the given value."""
  lastDayOfWork_gt: DateTime

  """All values greater than or equal the given value."""
  lastDayOfWork_gte: DateTime
  firstDayOfLeave: DateTime

  """All values that are not equal to given value."""
  firstDayOfLeave_not: DateTime

  """All values that are contained in given list."""
  firstDayOfLeave_in: [DateTime!]

  """All values that are not contained in given list."""
  firstDayOfLeave_not_in: [DateTime!]

  """All values less than the given value."""
  firstDayOfLeave_lt: DateTime

  """All values less than or equal the given value."""
  firstDayOfLeave_lte: DateTime

  """All values greater than the given value."""
  firstDayOfLeave_gt: DateTime

  """All values greater than or equal the given value."""
  firstDayOfLeave_gte: DateTime
  lastDayOfLeave: DateTime

  """All values that are not equal to given value."""
  lastDayOfLeave_not: DateTime

  """All values that are contained in given list."""
  lastDayOfLeave_in: [DateTime!]

  """All values that are not contained in given list."""
  lastDayOfLeave_not_in: [DateTime!]

  """All values less than the given value."""
  lastDayOfLeave_lt: DateTime

  """All values less than or equal the given value."""
  lastDayOfLeave_lte: DateTime

  """All values greater than the given value."""
  lastDayOfLeave_gt: DateTime

  """All values greater than or equal the given value."""
  lastDayOfLeave_gte: DateTime
  firstDayOfWork: DateTime

  """All values that are not equal to given value."""
  firstDayOfWork_not: DateTime

  """All values that are contained in given list."""
  firstDayOfWork_in: [DateTime!]

  """All values that are not contained in given list."""
  firstDayOfWork_not_in: [DateTime!]

  """All values less than the given value."""
  firstDayOfWork_lt: DateTime

  """All values less than or equal the given value."""
  firstDayOfWork_lte: DateTime

  """All values greater than the given value."""
  firstDayOfWork_gt: DateTime

  """All values greater than or equal the given value."""
  firstDayOfWork_gte: DateTime
  daysOfLeave: Int

  """All values that are not equal to given value."""
  daysOfLeave_not: Int

  """All values that are contained in given list."""
  daysOfLeave_in: [Int!]

  """All values that are not contained in given list."""
  daysOfLeave_not_in: [Int!]

  """All values less than the given value."""
  daysOfLeave_lt: Int

  """All values less than or equal the given value."""
  daysOfLeave_lte: Int

  """All values greater than the given value."""
  daysOfLeave_gt: Int

  """All values greater than or equal the given value."""
  daysOfLeave_gte: Int
  publicHolidays: Int

  """All values that are not equal to given value."""
  publicHolidays_not: Int

  """All values that are contained in given list."""
  publicHolidays_in: [Int!]

  """All values that are not contained in given list."""
  publicHolidays_not_in: [Int!]

  """All values less than the given value."""
  publicHolidays_lt: Int

  """All values less than or equal the given value."""
  publicHolidays_lte: Int

  """All values greater than the given value."""
  publicHolidays_gt: Int

  """All values greater than or equal the given value."""
  publicHolidays_gte: Int
  totalLeaveDays: Int

  """All values that are not equal to given value."""
  totalLeaveDays_not: Int

  """All values that are contained in given list."""
  totalLeaveDays_in: [Int!]

  """All values that are not contained in given list."""
  totalLeaveDays_not_in: [Int!]

  """All values less than the given value."""
  totalLeaveDays_lt: Int

  """All values less than or equal the given value."""
  totalLeaveDays_lte: Int

  """All values greater than the given value."""
  totalLeaveDays_gt: Int

  """All values greater than or equal the given value."""
  totalLeaveDays_gte: Int
  type: LEAVE_TYPE

  """All values that are not equal to given value."""
  type_not: LEAVE_TYPE

  """All values that are contained in given list."""
  type_in: [LEAVE_TYPE!]

  """All values that are not contained in given list."""
  type_not_in: [LEAVE_TYPE!]
  notes: String

  """All values that are not equal to given value."""
  notes_not: String

  """All values that are contained in given list."""
  notes_in: [String!]

  """All values that are not contained in given list."""
  notes_not_in: [String!]

  """All values less than the given value."""
  notes_lt: String

  """All values less than or equal the given value."""
  notes_lte: String

  """All values greater than the given value."""
  notes_gt: String

  """All values greater than or equal the given value."""
  notes_gte: String

  """All values containing the given string."""
  notes_contains: String

  """All values not containing the given string."""
  notes_not_contains: String

  """All values starting with the given string."""
  notes_starts_with: String

  """All values not starting with the given string."""
  notes_not_starts_with: String

  """All values ending with the given string."""
  notes_ends_with: String

  """All values not ending with the given string."""
  notes_not_ends_with: String
  forUser: UserWhereInput
}

input LeaveWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createStandupDetail(data: StandupDetailCreateInput!): StandupDetail!
  createLeave(data: LeaveCreateInput!): Leave!
  createQuestion(data: QuestionCreateInput!): Question!
  createAnswer(data: AnswerCreateInput!): Answer!
  createTag(data: TagCreateInput!): Tag!
  createQuestionLink(data: QuestionLinkCreateInput!): QuestionLink!
  createQuestionNote(data: QuestionNoteCreateInput!): QuestionNote!
  createAnswerLink(data: AnswerLinkCreateInput!): AnswerLink!
  createAnswerNote(data: AnswerNoteCreateInput!): AnswerNote!
  createCodeSnippet(data: CodeSnippetCreateInput!): CodeSnippet!
  createCodeLink(data: CodeLinkCreateInput!): CodeLink!
  createCodeTag(data: CodeTagCreateInput!): CodeTag!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateStandupDetail(data: StandupDetailUpdateInput!, where: StandupDetailWhereUniqueInput!): StandupDetail
  updateLeave(data: LeaveUpdateInput!, where: LeaveWhereUniqueInput!): Leave
  updateQuestion(data: QuestionUpdateInput!, where: QuestionWhereUniqueInput!): Question
  updateAnswer(data: AnswerUpdateInput!, where: AnswerWhereUniqueInput!): Answer
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateQuestionLink(data: QuestionLinkUpdateInput!, where: QuestionLinkWhereUniqueInput!): QuestionLink
  updateQuestionNote(data: QuestionNoteUpdateInput!, where: QuestionNoteWhereUniqueInput!): QuestionNote
  updateAnswerLink(data: AnswerLinkUpdateInput!, where: AnswerLinkWhereUniqueInput!): AnswerLink
  updateAnswerNote(data: AnswerNoteUpdateInput!, where: AnswerNoteWhereUniqueInput!): AnswerNote
  updateCodeSnippet(data: CodeSnippetUpdateInput!, where: CodeSnippetWhereUniqueInput!): CodeSnippet
  updateCodeLink(data: CodeLinkUpdateInput!, where: CodeLinkWhereUniqueInput!): CodeLink
  updateCodeTag(data: CodeTagUpdateInput!, where: CodeTagWhereUniqueInput!): CodeTag
  deleteUser(where: UserWhereUniqueInput!): User
  deleteStandupDetail(where: StandupDetailWhereUniqueInput!): StandupDetail
  deleteLeave(where: LeaveWhereUniqueInput!): Leave
  deleteQuestion(where: QuestionWhereUniqueInput!): Question
  deleteAnswer(where: AnswerWhereUniqueInput!): Answer
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteQuestionLink(where: QuestionLinkWhereUniqueInput!): QuestionLink
  deleteQuestionNote(where: QuestionNoteWhereUniqueInput!): QuestionNote
  deleteAnswerLink(where: AnswerLinkWhereUniqueInput!): AnswerLink
  deleteAnswerNote(where: AnswerNoteWhereUniqueInput!): AnswerNote
  deleteCodeSnippet(where: CodeSnippetWhereUniqueInput!): CodeSnippet
  deleteCodeLink(where: CodeLinkWhereUniqueInput!): CodeLink
  deleteCodeTag(where: CodeTagWhereUniqueInput!): CodeTag
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertStandupDetail(where: StandupDetailWhereUniqueInput!, create: StandupDetailCreateInput!, update: StandupDetailUpdateInput!): StandupDetail!
  upsertLeave(where: LeaveWhereUniqueInput!, create: LeaveCreateInput!, update: LeaveUpdateInput!): Leave!
  upsertQuestion(where: QuestionWhereUniqueInput!, create: QuestionCreateInput!, update: QuestionUpdateInput!): Question!
  upsertAnswer(where: AnswerWhereUniqueInput!, create: AnswerCreateInput!, update: AnswerUpdateInput!): Answer!
  upsertTag(where: TagWhereUniqueInput!, create: TagCreateInput!, update: TagUpdateInput!): Tag!
  upsertQuestionLink(where: QuestionLinkWhereUniqueInput!, create: QuestionLinkCreateInput!, update: QuestionLinkUpdateInput!): QuestionLink!
  upsertQuestionNote(where: QuestionNoteWhereUniqueInput!, create: QuestionNoteCreateInput!, update: QuestionNoteUpdateInput!): QuestionNote!
  upsertAnswerLink(where: AnswerLinkWhereUniqueInput!, create: AnswerLinkCreateInput!, update: AnswerLinkUpdateInput!): AnswerLink!
  upsertAnswerNote(where: AnswerNoteWhereUniqueInput!, create: AnswerNoteCreateInput!, update: AnswerNoteUpdateInput!): AnswerNote!
  upsertCodeSnippet(where: CodeSnippetWhereUniqueInput!, create: CodeSnippetCreateInput!, update: CodeSnippetUpdateInput!): CodeSnippet!
  upsertCodeLink(where: CodeLinkWhereUniqueInput!, create: CodeLinkCreateInput!, update: CodeLinkUpdateInput!): CodeLink!
  upsertCodeTag(where: CodeTagWhereUniqueInput!, create: CodeTagCreateInput!, update: CodeTagUpdateInput!): CodeTag!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyStandupDetails(data: StandupDetailUpdateManyMutationInput!, where: StandupDetailWhereInput): BatchPayload!
  updateManyLeaves(data: LeaveUpdateManyMutationInput!, where: LeaveWhereInput): BatchPayload!
  updateManyQuestions(data: QuestionUpdateManyMutationInput!, where: QuestionWhereInput): BatchPayload!
  updateManyAnswers(data: AnswerUpdateManyMutationInput!, where: AnswerWhereInput): BatchPayload!
  updateManyTags(data: TagUpdateManyMutationInput!, where: TagWhereInput): BatchPayload!
  updateManyQuestionLinks(data: QuestionLinkUpdateManyMutationInput!, where: QuestionLinkWhereInput): BatchPayload!
  updateManyQuestionNotes(data: QuestionNoteUpdateManyMutationInput!, where: QuestionNoteWhereInput): BatchPayload!
  updateManyAnswerLinks(data: AnswerLinkUpdateManyMutationInput!, where: AnswerLinkWhereInput): BatchPayload!
  updateManyAnswerNotes(data: AnswerNoteUpdateManyMutationInput!, where: AnswerNoteWhereInput): BatchPayload!
  updateManyCodeSnippets(data: CodeSnippetUpdateManyMutationInput!, where: CodeSnippetWhereInput): BatchPayload!
  updateManyCodeLinks(data: CodeLinkUpdateManyMutationInput!, where: CodeLinkWhereInput): BatchPayload!
  updateManyCodeTags(data: CodeTagUpdateManyMutationInput!, where: CodeTagWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyStandupDetails(where: StandupDetailWhereInput): BatchPayload!
  deleteManyLeaves(where: LeaveWhereInput): BatchPayload!
  deleteManyQuestions(where: QuestionWhereInput): BatchPayload!
  deleteManyAnswers(where: AnswerWhereInput): BatchPayload!
  deleteManyTags(where: TagWhereInput): BatchPayload!
  deleteManyQuestionLinks(where: QuestionLinkWhereInput): BatchPayload!
  deleteManyQuestionNotes(where: QuestionNoteWhereInput): BatchPayload!
  deleteManyAnswerLinks(where: AnswerLinkWhereInput): BatchPayload!
  deleteManyAnswerNotes(where: AnswerNoteWhereInput): BatchPayload!
  deleteManyCodeSnippets(where: CodeSnippetWhereInput): BatchPayload!
  deleteManyCodeLinks(where: CodeLinkWhereInput): BatchPayload!
  deleteManyCodeTags(where: CodeTagWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  standupDetails(where: StandupDetailWhereInput, orderBy: StandupDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StandupDetail]!
  leaves(where: LeaveWhereInput, orderBy: LeaveOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Leave]!
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question]!
  answers(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Answer]!
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag]!
  questionLinks(where: QuestionLinkWhereInput, orderBy: QuestionLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionLink]!
  questionNotes(where: QuestionNoteWhereInput, orderBy: QuestionNoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionNote]!
  answerLinks(where: AnswerLinkWhereInput, orderBy: AnswerLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AnswerLink]!
  answerNotes(where: AnswerNoteWhereInput, orderBy: AnswerNoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AnswerNote]!
  codeSnippets(where: CodeSnippetWhereInput, orderBy: CodeSnippetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CodeSnippet]!
  codeLinks(where: CodeLinkWhereInput, orderBy: CodeLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CodeLink]!
  codeTags(where: CodeTagWhereInput, orderBy: CodeTagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CodeTag]!
  user(where: UserWhereUniqueInput!): User
  standupDetail(where: StandupDetailWhereUniqueInput!): StandupDetail
  leave(where: LeaveWhereUniqueInput!): Leave
  question(where: QuestionWhereUniqueInput!): Question
  answer(where: AnswerWhereUniqueInput!): Answer
  tag(where: TagWhereUniqueInput!): Tag
  questionLink(where: QuestionLinkWhereUniqueInput!): QuestionLink
  questionNote(where: QuestionNoteWhereUniqueInput!): QuestionNote
  answerLink(where: AnswerLinkWhereUniqueInput!): AnswerLink
  answerNote(where: AnswerNoteWhereUniqueInput!): AnswerNote
  codeSnippet(where: CodeSnippetWhereUniqueInput!): CodeSnippet
  codeLink(where: CodeLinkWhereUniqueInput!): CodeLink
  codeTag(where: CodeTagWhereUniqueInput!): CodeTag
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  standupDetailsConnection(where: StandupDetailWhereInput, orderBy: StandupDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StandupDetailConnection!
  leavesConnection(where: LeaveWhereInput, orderBy: LeaveOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LeaveConnection!
  questionsConnection(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionConnection!
  answersConnection(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AnswerConnection!
  tagsConnection(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TagConnection!
  questionLinksConnection(where: QuestionLinkWhereInput, orderBy: QuestionLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionLinkConnection!
  questionNotesConnection(where: QuestionNoteWhereInput, orderBy: QuestionNoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionNoteConnection!
  answerLinksConnection(where: AnswerLinkWhereInput, orderBy: AnswerLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AnswerLinkConnection!
  answerNotesConnection(where: AnswerNoteWhereInput, orderBy: AnswerNoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AnswerNoteConnection!
  codeSnippetsConnection(where: CodeSnippetWhereInput, orderBy: CodeSnippetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CodeSnippetConnection!
  codeLinksConnection(where: CodeLinkWhereInput, orderBy: CodeLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CodeLinkConnection!
  codeTagsConnection(where: CodeTagWhereInput, orderBy: CodeTagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CodeTagConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Question implements Node {
  id: ID!
  name: String!
  answers(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Answer!]
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  notes(where: QuestionNoteWhereInput, orderBy: QuestionNoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionNote!]
  links(where: QuestionLinkWhereInput, orderBy: QuestionLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionLink!]
}

"""A connection to a list of items."""
type QuestionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuestionEdge]!
  aggregate: AggregateQuestion!
}

input QuestionCreateInput {
  name: String!
  answers: AnswerCreateManyWithoutQuestionInput
  tags: TagCreateManyWithoutQuestionsInput
  notes: QuestionNoteCreateManyWithoutQuestionInput
  links: QuestionLinkCreateManyWithoutQuestionsInput
}

input QuestionCreateManyWithoutLinksInput {
  create: [QuestionCreateWithoutLinksInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutTagsInput {
  create: [QuestionCreateWithoutTagsInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateOneWithoutAnswersInput {
  create: QuestionCreateWithoutAnswersInput
  connect: QuestionWhereUniqueInput
}

input QuestionCreateOneWithoutNotesInput {
  create: QuestionCreateWithoutNotesInput
  connect: QuestionWhereUniqueInput
}

input QuestionCreateWithoutAnswersInput {
  name: String!
  tags: TagCreateManyWithoutQuestionsInput
  notes: QuestionNoteCreateManyWithoutQuestionInput
  links: QuestionLinkCreateManyWithoutQuestionsInput
}

input QuestionCreateWithoutLinksInput {
  name: String!
  answers: AnswerCreateManyWithoutQuestionInput
  tags: TagCreateManyWithoutQuestionsInput
  notes: QuestionNoteCreateManyWithoutQuestionInput
}

input QuestionCreateWithoutNotesInput {
  name: String!
  answers: AnswerCreateManyWithoutQuestionInput
  tags: TagCreateManyWithoutQuestionsInput
  links: QuestionLinkCreateManyWithoutQuestionsInput
}

input QuestionCreateWithoutTagsInput {
  name: String!
  answers: AnswerCreateManyWithoutQuestionInput
  notes: QuestionNoteCreateManyWithoutQuestionInput
  links: QuestionLinkCreateManyWithoutQuestionsInput
}

"""An edge in a connection."""
type QuestionEdge {
  """The item at the end of the edge."""
  node: Question!

  """A cursor for use in pagination."""
  cursor: String!
}

type QuestionLink implements Node {
  id: ID!
  name: String!
  url: String!
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
}

"""A connection to a list of items."""
type QuestionLinkConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuestionLinkEdge]!
  aggregate: AggregateQuestionLink!
}

input QuestionLinkCreateInput {
  name: String!
  url: String!
  questions: QuestionCreateManyWithoutLinksInput
}

input QuestionLinkCreateManyWithoutQuestionsInput {
  create: [QuestionLinkCreateWithoutQuestionsInput!]
  connect: [QuestionLinkWhereUniqueInput!]
}

input QuestionLinkCreateWithoutQuestionsInput {
  name: String!
  url: String!
}

"""An edge in a connection."""
type QuestionLinkEdge {
  """The item at the end of the edge."""
  node: QuestionLink!

  """A cursor for use in pagination."""
  cursor: String!
}

enum QuestionLinkOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  url_ASC
  url_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type QuestionLinkPreviousValues {
  id: ID!
  name: String!
  url: String!
}

input QuestionLinkScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionLinkScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionLinkScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionLinkScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
}

type QuestionLinkSubscriptionPayload {
  mutation: MutationType!
  node: QuestionLink
  updatedFields: [String!]
  previousValues: QuestionLinkPreviousValues
}

input QuestionLinkSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionLinkSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionLinkSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionLinkSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuestionLinkWhereInput
}

input QuestionLinkUpdateInput {
  name: String
  url: String
  questions: QuestionUpdateManyWithoutLinksInput
}

input QuestionLinkUpdateManyDataInput {
  name: String
  url: String
}

input QuestionLinkUpdateManyMutationInput {
  name: String
  url: String
}

input QuestionLinkUpdateManyWithoutQuestionsInput {
  create: [QuestionLinkCreateWithoutQuestionsInput!]
  connect: [QuestionLinkWhereUniqueInput!]
  disconnect: [QuestionLinkWhereUniqueInput!]
  delete: [QuestionLinkWhereUniqueInput!]
  update: [QuestionLinkUpdateWithWhereUniqueWithoutQuestionsInput!]
  updateMany: [QuestionLinkUpdateManyWithWhereNestedInput!]
  deleteMany: [QuestionLinkScalarWhereInput!]
  upsert: [QuestionLinkUpsertWithWhereUniqueWithoutQuestionsInput!]
}

input QuestionLinkUpdateManyWithWhereNestedInput {
  where: QuestionLinkScalarWhereInput!
  data: QuestionLinkUpdateManyDataInput!
}

input QuestionLinkUpdateWithoutQuestionsDataInput {
  name: String
  url: String
}

input QuestionLinkUpdateWithWhereUniqueWithoutQuestionsInput {
  where: QuestionLinkWhereUniqueInput!
  data: QuestionLinkUpdateWithoutQuestionsDataInput!
}

input QuestionLinkUpsertWithWhereUniqueWithoutQuestionsInput {
  where: QuestionLinkWhereUniqueInput!
  update: QuestionLinkUpdateWithoutQuestionsDataInput!
  create: QuestionLinkCreateWithoutQuestionsInput!
}

input QuestionLinkWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionLinkWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionLinkWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionLinkWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  questions_every: QuestionWhereInput
  questions_some: QuestionWhereInput
  questions_none: QuestionWhereInput
}

input QuestionLinkWhereUniqueInput {
  id: ID
}

type QuestionNote implements Node {
  id: ID!
  content: String!
  question: Question
}

"""A connection to a list of items."""
type QuestionNoteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuestionNoteEdge]!
  aggregate: AggregateQuestionNote!
}

input QuestionNoteCreateInput {
  content: String!
  question: QuestionCreateOneWithoutNotesInput
}

input QuestionNoteCreateManyWithoutQuestionInput {
  create: [QuestionNoteCreateWithoutQuestionInput!]
  connect: [QuestionNoteWhereUniqueInput!]
}

input QuestionNoteCreateWithoutQuestionInput {
  content: String!
}

"""An edge in a connection."""
type QuestionNoteEdge {
  """The item at the end of the edge."""
  node: QuestionNote!

  """A cursor for use in pagination."""
  cursor: String!
}

enum QuestionNoteOrderByInput {
  id_ASC
  id_DESC
  content_ASC
  content_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type QuestionNotePreviousValues {
  id: ID!
  content: String!
}

input QuestionNoteScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionNoteScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionNoteScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionNoteScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
}

type QuestionNoteSubscriptionPayload {
  mutation: MutationType!
  node: QuestionNote
  updatedFields: [String!]
  previousValues: QuestionNotePreviousValues
}

input QuestionNoteSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionNoteSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionNoteSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionNoteSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuestionNoteWhereInput
}

input QuestionNoteUpdateInput {
  content: String
  question: QuestionUpdateOneWithoutNotesInput
}

input QuestionNoteUpdateManyDataInput {
  content: String
}

input QuestionNoteUpdateManyMutationInput {
  content: String
}

input QuestionNoteUpdateManyWithoutQuestionInput {
  create: [QuestionNoteCreateWithoutQuestionInput!]
  connect: [QuestionNoteWhereUniqueInput!]
  disconnect: [QuestionNoteWhereUniqueInput!]
  delete: [QuestionNoteWhereUniqueInput!]
  update: [QuestionNoteUpdateWithWhereUniqueWithoutQuestionInput!]
  updateMany: [QuestionNoteUpdateManyWithWhereNestedInput!]
  deleteMany: [QuestionNoteScalarWhereInput!]
  upsert: [QuestionNoteUpsertWithWhereUniqueWithoutQuestionInput!]
}

input QuestionNoteUpdateManyWithWhereNestedInput {
  where: QuestionNoteScalarWhereInput!
  data: QuestionNoteUpdateManyDataInput!
}

input QuestionNoteUpdateWithoutQuestionDataInput {
  content: String
}

input QuestionNoteUpdateWithWhereUniqueWithoutQuestionInput {
  where: QuestionNoteWhereUniqueInput!
  data: QuestionNoteUpdateWithoutQuestionDataInput!
}

input QuestionNoteUpsertWithWhereUniqueWithoutQuestionInput {
  where: QuestionNoteWhereUniqueInput!
  update: QuestionNoteUpdateWithoutQuestionDataInput!
  create: QuestionNoteCreateWithoutQuestionInput!
}

input QuestionNoteWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionNoteWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionNoteWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionNoteWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  question: QuestionWhereInput
}

input QuestionNoteWhereUniqueInput {
  id: ID
}

enum QuestionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type QuestionPreviousValues {
  id: ID!
  name: String!
}

input QuestionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type QuestionSubscriptionPayload {
  mutation: MutationType!
  node: Question
  updatedFields: [String!]
  previousValues: QuestionPreviousValues
}

input QuestionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuestionWhereInput
}

input QuestionUpdateInput {
  name: String
  answers: AnswerUpdateManyWithoutQuestionInput
  tags: TagUpdateManyWithoutQuestionsInput
  notes: QuestionNoteUpdateManyWithoutQuestionInput
  links: QuestionLinkUpdateManyWithoutQuestionsInput
}

input QuestionUpdateManyDataInput {
  name: String
}

input QuestionUpdateManyMutationInput {
  name: String
}

input QuestionUpdateManyWithoutLinksInput {
  create: [QuestionCreateWithoutLinksInput!]
  connect: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutLinksInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
  deleteMany: [QuestionScalarWhereInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutLinksInput!]
}

input QuestionUpdateManyWithoutTagsInput {
  create: [QuestionCreateWithoutTagsInput!]
  connect: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutTagsInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
  deleteMany: [QuestionScalarWhereInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutTagsInput!]
}

input QuestionUpdateManyWithWhereNestedInput {
  where: QuestionScalarWhereInput!
  data: QuestionUpdateManyDataInput!
}

input QuestionUpdateOneWithoutAnswersInput {
  create: QuestionCreateWithoutAnswersInput
  connect: QuestionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: QuestionUpdateWithoutAnswersDataInput
  upsert: QuestionUpsertWithoutAnswersInput
}

input QuestionUpdateOneWithoutNotesInput {
  create: QuestionCreateWithoutNotesInput
  connect: QuestionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: QuestionUpdateWithoutNotesDataInput
  upsert: QuestionUpsertWithoutNotesInput
}

input QuestionUpdateWithoutAnswersDataInput {
  name: String
  tags: TagUpdateManyWithoutQuestionsInput
  notes: QuestionNoteUpdateManyWithoutQuestionInput
  links: QuestionLinkUpdateManyWithoutQuestionsInput
}

input QuestionUpdateWithoutLinksDataInput {
  name: String
  answers: AnswerUpdateManyWithoutQuestionInput
  tags: TagUpdateManyWithoutQuestionsInput
  notes: QuestionNoteUpdateManyWithoutQuestionInput
}

input QuestionUpdateWithoutNotesDataInput {
  name: String
  answers: AnswerUpdateManyWithoutQuestionInput
  tags: TagUpdateManyWithoutQuestionsInput
  links: QuestionLinkUpdateManyWithoutQuestionsInput
}

input QuestionUpdateWithoutTagsDataInput {
  name: String
  answers: AnswerUpdateManyWithoutQuestionInput
  notes: QuestionNoteUpdateManyWithoutQuestionInput
  links: QuestionLinkUpdateManyWithoutQuestionsInput
}

input QuestionUpdateWithWhereUniqueWithoutLinksInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutLinksDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutTagsInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutTagsDataInput!
}

input QuestionUpsertWithoutAnswersInput {
  update: QuestionUpdateWithoutAnswersDataInput!
  create: QuestionCreateWithoutAnswersInput!
}

input QuestionUpsertWithoutNotesInput {
  update: QuestionUpdateWithoutNotesDataInput!
  create: QuestionCreateWithoutNotesInput!
}

input QuestionUpsertWithWhereUniqueWithoutLinksInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutLinksDataInput!
  create: QuestionCreateWithoutLinksInput!
}

input QuestionUpsertWithWhereUniqueWithoutTagsInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutTagsDataInput!
  create: QuestionCreateWithoutTagsInput!
}

input QuestionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  answers_every: AnswerWhereInput
  answers_some: AnswerWhereInput
  answers_none: AnswerWhereInput
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  notes_every: QuestionNoteWhereInput
  notes_some: QuestionNoteWhereInput
  notes_none: QuestionNoteWhereInput
  links_every: QuestionLinkWhereInput
  links_some: QuestionLinkWhereInput
  links_none: QuestionLinkWhereInput
}

input QuestionWhereUniqueInput {
  id: ID
  name: String
}

enum ROLE {
  DESIGNER
  TESTER
  ANALYST
  ONBOARDER
  DEVELOPER
  PROJECT_MANAGER
  WIZARD
}

type StandupDetail implements Node {
  id: ID!
  createdAt: DateTime!
  forUser: User
  notes: String
  timeTaken: Int
}

"""A connection to a list of items."""
type StandupDetailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StandupDetailEdge]!
  aggregate: AggregateStandupDetail!
}

input StandupDetailCreateInput {
  notes: String
  timeTaken: Int
  forUser: UserCreateOneWithoutStandupDetailsInput
}

input StandupDetailCreateManyWithoutForUserInput {
  create: [StandupDetailCreateWithoutForUserInput!]
  connect: [StandupDetailWhereUniqueInput!]
}

input StandupDetailCreateWithoutForUserInput {
  notes: String
  timeTaken: Int
}

"""An edge in a connection."""
type StandupDetailEdge {
  """The item at the end of the edge."""
  node: StandupDetail!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StandupDetailOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  notes_ASC
  notes_DESC
  timeTaken_ASC
  timeTaken_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type StandupDetailPreviousValues {
  id: ID!
  createdAt: DateTime!
  notes: String
  timeTaken: Int
}

input StandupDetailScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [StandupDetailScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [StandupDetailScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StandupDetailScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  notes: String

  """All values that are not equal to given value."""
  notes_not: String

  """All values that are contained in given list."""
  notes_in: [String!]

  """All values that are not contained in given list."""
  notes_not_in: [String!]

  """All values less than the given value."""
  notes_lt: String

  """All values less than or equal the given value."""
  notes_lte: String

  """All values greater than the given value."""
  notes_gt: String

  """All values greater than or equal the given value."""
  notes_gte: String

  """All values containing the given string."""
  notes_contains: String

  """All values not containing the given string."""
  notes_not_contains: String

  """All values starting with the given string."""
  notes_starts_with: String

  """All values not starting with the given string."""
  notes_not_starts_with: String

  """All values ending with the given string."""
  notes_ends_with: String

  """All values not ending with the given string."""
  notes_not_ends_with: String
  timeTaken: Int

  """All values that are not equal to given value."""
  timeTaken_not: Int

  """All values that are contained in given list."""
  timeTaken_in: [Int!]

  """All values that are not contained in given list."""
  timeTaken_not_in: [Int!]

  """All values less than the given value."""
  timeTaken_lt: Int

  """All values less than or equal the given value."""
  timeTaken_lte: Int

  """All values greater than the given value."""
  timeTaken_gt: Int

  """All values greater than or equal the given value."""
  timeTaken_gte: Int
}

type StandupDetailSubscriptionPayload {
  mutation: MutationType!
  node: StandupDetail
  updatedFields: [String!]
  previousValues: StandupDetailPreviousValues
}

input StandupDetailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StandupDetailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StandupDetailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StandupDetailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StandupDetailWhereInput
}

input StandupDetailUpdateInput {
  notes: String
  timeTaken: Int
  forUser: UserUpdateOneWithoutStandupDetailsInput
}

input StandupDetailUpdateManyDataInput {
  notes: String
  timeTaken: Int
}

input StandupDetailUpdateManyMutationInput {
  notes: String
  timeTaken: Int
}

input StandupDetailUpdateManyWithoutForUserInput {
  create: [StandupDetailCreateWithoutForUserInput!]
  connect: [StandupDetailWhereUniqueInput!]
  disconnect: [StandupDetailWhereUniqueInput!]
  delete: [StandupDetailWhereUniqueInput!]
  update: [StandupDetailUpdateWithWhereUniqueWithoutForUserInput!]
  updateMany: [StandupDetailUpdateManyWithWhereNestedInput!]
  deleteMany: [StandupDetailScalarWhereInput!]
  upsert: [StandupDetailUpsertWithWhereUniqueWithoutForUserInput!]
}

input StandupDetailUpdateManyWithWhereNestedInput {
  where: StandupDetailScalarWhereInput!
  data: StandupDetailUpdateManyDataInput!
}

input StandupDetailUpdateWithoutForUserDataInput {
  notes: String
  timeTaken: Int
}

input StandupDetailUpdateWithWhereUniqueWithoutForUserInput {
  where: StandupDetailWhereUniqueInput!
  data: StandupDetailUpdateWithoutForUserDataInput!
}

input StandupDetailUpsertWithWhereUniqueWithoutForUserInput {
  where: StandupDetailWhereUniqueInput!
  update: StandupDetailUpdateWithoutForUserDataInput!
  create: StandupDetailCreateWithoutForUserInput!
}

input StandupDetailWhereInput {
  """Logical AND on all given filters."""
  AND: [StandupDetailWhereInput!]

  """Logical OR on all given filters."""
  OR: [StandupDetailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StandupDetailWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  notes: String

  """All values that are not equal to given value."""
  notes_not: String

  """All values that are contained in given list."""
  notes_in: [String!]

  """All values that are not contained in given list."""
  notes_not_in: [String!]

  """All values less than the given value."""
  notes_lt: String

  """All values less than or equal the given value."""
  notes_lte: String

  """All values greater than the given value."""
  notes_gt: String

  """All values greater than or equal the given value."""
  notes_gte: String

  """All values containing the given string."""
  notes_contains: String

  """All values not containing the given string."""
  notes_not_contains: String

  """All values starting with the given string."""
  notes_starts_with: String

  """All values not starting with the given string."""
  notes_not_starts_with: String

  """All values ending with the given string."""
  notes_ends_with: String

  """All values not ending with the given string."""
  notes_not_ends_with: String
  timeTaken: Int

  """All values that are not equal to given value."""
  timeTaken_not: Int

  """All values that are contained in given list."""
  timeTaken_in: [Int!]

  """All values that are not contained in given list."""
  timeTaken_not_in: [Int!]

  """All values less than the given value."""
  timeTaken_lt: Int

  """All values less than or equal the given value."""
  timeTaken_lte: Int

  """All values greater than the given value."""
  timeTaken_gt: Int

  """All values greater than or equal the given value."""
  timeTaken_gte: Int
  forUser: UserWhereInput
}

input StandupDetailWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  standupDetail(where: StandupDetailSubscriptionWhereInput): StandupDetailSubscriptionPayload
  leave(where: LeaveSubscriptionWhereInput): LeaveSubscriptionPayload
  question(where: QuestionSubscriptionWhereInput): QuestionSubscriptionPayload
  answer(where: AnswerSubscriptionWhereInput): AnswerSubscriptionPayload
  tag(where: TagSubscriptionWhereInput): TagSubscriptionPayload
  questionLink(where: QuestionLinkSubscriptionWhereInput): QuestionLinkSubscriptionPayload
  questionNote(where: QuestionNoteSubscriptionWhereInput): QuestionNoteSubscriptionPayload
  answerLink(where: AnswerLinkSubscriptionWhereInput): AnswerLinkSubscriptionPayload
  answerNote(where: AnswerNoteSubscriptionWhereInput): AnswerNoteSubscriptionPayload
  codeSnippet(where: CodeSnippetSubscriptionWhereInput): CodeSnippetSubscriptionPayload
  codeLink(where: CodeLinkSubscriptionWhereInput): CodeLinkSubscriptionPayload
  codeTag(where: CodeTagSubscriptionWhereInput): CodeTagSubscriptionPayload
}

type Tag implements Node {
  id: ID!
  name: String!
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
}

"""A connection to a list of items."""
type TagConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TagEdge]!
  aggregate: AggregateTag!
}

input TagCreateInput {
  name: String!
  questions: QuestionCreateManyWithoutTagsInput
}

input TagCreateManyWithoutQuestionsInput {
  create: [TagCreateWithoutQuestionsInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateWithoutQuestionsInput {
  name: String!
}

"""An edge in a connection."""
type TagEdge {
  """The item at the end of the edge."""
  node: Tag!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TagOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TagPreviousValues {
  id: ID!
  name: String!
}

input TagScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [TagScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [TagScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TagScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type TagSubscriptionPayload {
  mutation: MutationType!
  node: Tag
  updatedFields: [String!]
  previousValues: TagPreviousValues
}

input TagSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TagSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TagSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TagSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TagWhereInput
}

input TagUpdateInput {
  name: String
  questions: QuestionUpdateManyWithoutTagsInput
}

input TagUpdateManyDataInput {
  name: String
}

input TagUpdateManyMutationInput {
  name: String
}

input TagUpdateManyWithoutQuestionsInput {
  create: [TagCreateWithoutQuestionsInput!]
  connect: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  delete: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutQuestionsInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
  deleteMany: [TagScalarWhereInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutQuestionsInput!]
}

input TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput!
  data: TagUpdateManyDataInput!
}

input TagUpdateWithoutQuestionsDataInput {
  name: String
}

input TagUpdateWithWhereUniqueWithoutQuestionsInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutQuestionsDataInput!
}

input TagUpsertWithWhereUniqueWithoutQuestionsInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutQuestionsDataInput!
  create: TagCreateWithoutQuestionsInput!
}

input TagWhereInput {
  """Logical AND on all given filters."""
  AND: [TagWhereInput!]

  """Logical OR on all given filters."""
  OR: [TagWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TagWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  questions_every: QuestionWhereInput
  questions_some: QuestionWhereInput
  questions_none: QuestionWhereInput
}

input TagWhereUniqueInput {
  id: ID
  name: String
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  role: ROLE!
  standupDetails(where: StandupDetailWhereInput, orderBy: StandupDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StandupDetail!]
  jiraLink: String
  phone: String
  address: String
  appliedLeave(where: LeaveWhereInput, orderBy: LeaveOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Leave!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  role: ROLE
  jiraLink: String
  phone: String
  address: String
  standupDetails: StandupDetailCreateManyWithoutForUserInput
  appliedLeave: LeaveCreateManyWithoutForUserInput
}

input UserCreateOneWithoutAppliedLeaveInput {
  create: UserCreateWithoutAppliedLeaveInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutStandupDetailsInput {
  create: UserCreateWithoutStandupDetailsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAppliedLeaveInput {
  name: String!
  email: String!
  password: String!
  role: ROLE
  jiraLink: String
  phone: String
  address: String
  standupDetails: StandupDetailCreateManyWithoutForUserInput
}

input UserCreateWithoutStandupDetailsInput {
  name: String!
  email: String!
  password: String!
  role: ROLE
  jiraLink: String
  phone: String
  address: String
  appliedLeave: LeaveCreateManyWithoutForUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
  jiraLink_ASC
  jiraLink_DESC
  phone_ASC
  phone_DESC
  address_ASC
  address_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  role: ROLE!
  jiraLink: String
  phone: String
  address: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: ROLE
  jiraLink: String
  phone: String
  address: String
  standupDetails: StandupDetailUpdateManyWithoutForUserInput
  appliedLeave: LeaveUpdateManyWithoutForUserInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  role: ROLE
  jiraLink: String
  phone: String
  address: String
}

input UserUpdateOneWithoutAppliedLeaveInput {
  create: UserCreateWithoutAppliedLeaveInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutAppliedLeaveDataInput
  upsert: UserUpsertWithoutAppliedLeaveInput
}

input UserUpdateOneWithoutStandupDetailsInput {
  create: UserCreateWithoutStandupDetailsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutStandupDetailsDataInput
  upsert: UserUpsertWithoutStandupDetailsInput
}

input UserUpdateWithoutAppliedLeaveDataInput {
  name: String
  email: String
  password: String
  role: ROLE
  jiraLink: String
  phone: String
  address: String
  standupDetails: StandupDetailUpdateManyWithoutForUserInput
}

input UserUpdateWithoutStandupDetailsDataInput {
  name: String
  email: String
  password: String
  role: ROLE
  jiraLink: String
  phone: String
  address: String
  appliedLeave: LeaveUpdateManyWithoutForUserInput
}

input UserUpsertWithoutAppliedLeaveInput {
  update: UserUpdateWithoutAppliedLeaveDataInput!
  create: UserCreateWithoutAppliedLeaveInput!
}

input UserUpsertWithoutStandupDetailsInput {
  update: UserUpdateWithoutStandupDetailsDataInput!
  create: UserCreateWithoutStandupDetailsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  role: ROLE

  """All values that are not equal to given value."""
  role_not: ROLE

  """All values that are contained in given list."""
  role_in: [ROLE!]

  """All values that are not contained in given list."""
  role_not_in: [ROLE!]
  jiraLink: String

  """All values that are not equal to given value."""
  jiraLink_not: String

  """All values that are contained in given list."""
  jiraLink_in: [String!]

  """All values that are not contained in given list."""
  jiraLink_not_in: [String!]

  """All values less than the given value."""
  jiraLink_lt: String

  """All values less than or equal the given value."""
  jiraLink_lte: String

  """All values greater than the given value."""
  jiraLink_gt: String

  """All values greater than or equal the given value."""
  jiraLink_gte: String

  """All values containing the given string."""
  jiraLink_contains: String

  """All values not containing the given string."""
  jiraLink_not_contains: String

  """All values starting with the given string."""
  jiraLink_starts_with: String

  """All values not starting with the given string."""
  jiraLink_not_starts_with: String

  """All values ending with the given string."""
  jiraLink_ends_with: String

  """All values not ending with the given string."""
  jiraLink_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  standupDetails_every: StandupDetailWhereInput
  standupDetails_some: StandupDetailWhereInput
  standupDetails_none: StandupDetailWhereInput
  appliedLeave_every: LeaveWhereInput
  appliedLeave_some: LeaveWhereInput
  appliedLeave_none: LeaveWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
