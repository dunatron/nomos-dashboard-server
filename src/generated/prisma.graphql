# source: https://us1.prisma.sh/heath-dunlop-37e897/nomos-dashboard-db/dev
# timestamp: Fri Nov 02 2018 15:39:35 GMT+1300 (NZDT)

type AggregateStandupDetail {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createStandupDetail(data: StandupDetailCreateInput!): StandupDetail!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateStandupDetail(data: StandupDetailUpdateInput!, where: StandupDetailWhereUniqueInput!): StandupDetail
  deleteUser(where: UserWhereUniqueInput!): User
  deleteStandupDetail(where: StandupDetailWhereUniqueInput!): StandupDetail
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertStandupDetail(where: StandupDetailWhereUniqueInput!, create: StandupDetailCreateInput!, update: StandupDetailUpdateInput!): StandupDetail!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyStandupDetails(data: StandupDetailUpdateManyMutationInput!, where: StandupDetailWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyStandupDetails(where: StandupDetailWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  standupDetails(where: StandupDetailWhereInput, orderBy: StandupDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StandupDetail]!
  user(where: UserWhereUniqueInput!): User
  standupDetail(where: StandupDetailWhereUniqueInput!): StandupDetail
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  standupDetailsConnection(where: StandupDetailWhereInput, orderBy: StandupDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StandupDetailConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

enum ROLE {
  DESIGNER
  TESTER
  ANALYST
  ONBOARDER
  DEVELOPER
  PROJECT_MANAGER
  WIZARD
}

type StandupDetail implements Node {
  id: ID!
  createdAt: DateTime!
  forUser: User
  notes: String
  timeTaken: Int
}

"""A connection to a list of items."""
type StandupDetailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StandupDetailEdge]!
  aggregate: AggregateStandupDetail!
}

input StandupDetailCreateInput {
  notes: String
  timeTaken: Int
  forUser: UserCreateOneWithoutStandupDetailsInput
}

input StandupDetailCreateManyWithoutForUserInput {
  create: [StandupDetailCreateWithoutForUserInput!]
  connect: [StandupDetailWhereUniqueInput!]
}

input StandupDetailCreateWithoutForUserInput {
  notes: String
  timeTaken: Int
}

"""An edge in a connection."""
type StandupDetailEdge {
  """The item at the end of the edge."""
  node: StandupDetail!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StandupDetailOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  notes_ASC
  notes_DESC
  timeTaken_ASC
  timeTaken_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type StandupDetailPreviousValues {
  id: ID!
  createdAt: DateTime!
  notes: String
  timeTaken: Int
}

type StandupDetailSubscriptionPayload {
  mutation: MutationType!
  node: StandupDetail
  updatedFields: [String!]
  previousValues: StandupDetailPreviousValues
}

input StandupDetailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StandupDetailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StandupDetailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StandupDetailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StandupDetailWhereInput
}

input StandupDetailUpdateInput {
  notes: String
  timeTaken: Int
  forUser: UserUpdateOneWithoutStandupDetailsInput
}

input StandupDetailUpdateManyMutationInput {
  notes: String
  timeTaken: Int
}

input StandupDetailUpdateManyWithoutForUserInput {
  create: [StandupDetailCreateWithoutForUserInput!]
  connect: [StandupDetailWhereUniqueInput!]
  disconnect: [StandupDetailWhereUniqueInput!]
  delete: [StandupDetailWhereUniqueInput!]
  update: [StandupDetailUpdateWithWhereUniqueWithoutForUserInput!]
  upsert: [StandupDetailUpsertWithWhereUniqueWithoutForUserInput!]
}

input StandupDetailUpdateWithoutForUserDataInput {
  notes: String
  timeTaken: Int
}

input StandupDetailUpdateWithWhereUniqueWithoutForUserInput {
  where: StandupDetailWhereUniqueInput!
  data: StandupDetailUpdateWithoutForUserDataInput!
}

input StandupDetailUpsertWithWhereUniqueWithoutForUserInput {
  where: StandupDetailWhereUniqueInput!
  update: StandupDetailUpdateWithoutForUserDataInput!
  create: StandupDetailCreateWithoutForUserInput!
}

input StandupDetailWhereInput {
  """Logical AND on all given filters."""
  AND: [StandupDetailWhereInput!]

  """Logical OR on all given filters."""
  OR: [StandupDetailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StandupDetailWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  notes: String

  """All values that are not equal to given value."""
  notes_not: String

  """All values that are contained in given list."""
  notes_in: [String!]

  """All values that are not contained in given list."""
  notes_not_in: [String!]

  """All values less than the given value."""
  notes_lt: String

  """All values less than or equal the given value."""
  notes_lte: String

  """All values greater than the given value."""
  notes_gt: String

  """All values greater than or equal the given value."""
  notes_gte: String

  """All values containing the given string."""
  notes_contains: String

  """All values not containing the given string."""
  notes_not_contains: String

  """All values starting with the given string."""
  notes_starts_with: String

  """All values not starting with the given string."""
  notes_not_starts_with: String

  """All values ending with the given string."""
  notes_ends_with: String

  """All values not ending with the given string."""
  notes_not_ends_with: String
  timeTaken: Int

  """All values that are not equal to given value."""
  timeTaken_not: Int

  """All values that are contained in given list."""
  timeTaken_in: [Int!]

  """All values that are not contained in given list."""
  timeTaken_not_in: [Int!]

  """All values less than the given value."""
  timeTaken_lt: Int

  """All values less than or equal the given value."""
  timeTaken_lte: Int

  """All values greater than the given value."""
  timeTaken_gt: Int

  """All values greater than or equal the given value."""
  timeTaken_gte: Int
  forUser: UserWhereInput
}

input StandupDetailWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  standupDetail(where: StandupDetailSubscriptionWhereInput): StandupDetailSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  role: ROLE!
  standupDetails(where: StandupDetailWhereInput, orderBy: StandupDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StandupDetail!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  role: ROLE
  standupDetails: StandupDetailCreateManyWithoutForUserInput
}

input UserCreateOneWithoutStandupDetailsInput {
  create: UserCreateWithoutStandupDetailsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutStandupDetailsInput {
  name: String!
  email: String!
  password: String!
  role: ROLE
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  role: ROLE!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: ROLE
  standupDetails: StandupDetailUpdateManyWithoutForUserInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  role: ROLE
}

input UserUpdateOneWithoutStandupDetailsInput {
  create: UserCreateWithoutStandupDetailsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutStandupDetailsDataInput
  upsert: UserUpsertWithoutStandupDetailsInput
}

input UserUpdateWithoutStandupDetailsDataInput {
  name: String
  email: String
  password: String
  role: ROLE
}

input UserUpsertWithoutStandupDetailsInput {
  update: UserUpdateWithoutStandupDetailsDataInput!
  create: UserCreateWithoutStandupDetailsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  role: ROLE

  """All values that are not equal to given value."""
  role_not: ROLE

  """All values that are contained in given list."""
  role_in: [ROLE!]

  """All values that are not contained in given list."""
  role_not_in: [ROLE!]
  standupDetails_every: StandupDetailWhereInput
  standupDetails_some: StandupDetailWhereInput
  standupDetails_none: StandupDetailWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
