# import Question, Answer, Tag, QuestionLink, QuestionNote, AnswerLink, AnswerNote, User, ROLE, StandupDetails, Leave, LEAVE_TYPE, LeaveSubscriptionPayload, LeaveScalarWhereInput LeaveOrderByInput, QuestionCreateInput from "./generated/prisma.graphql"

type Query {
  info: String!
  allUsers: [User!]!
  getUser: User!
  getStandupDetails: [StandupDetail!]!
  getAllLeave: [Leave!]!
  leaveFeed(
    filter: String
    betweenFilter: [DateTime!]
    skip: Int
    first: Int
    orderBy: LeaveOrderByInput
  ): LeaveFeed!
  searchQuestions(search: String): [Question!]!
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  changeUserRole(id: ID!, role: ROLE!): User!
  acceptLeave(id: ID!): Leave!
  createStandupDetail(userId: ID!, timeTaken: Int, notes: String): StandupDetail
  createLeave(
    userId: ID!
    lastDayOfWork: DateTime!
    firstDayOfLeave: DateTime!
    lastDayOfLeave: DateTime!
    firstDayOfWork: DateTime!
    daysOfLeave: Int!
    publicHolidays: Int!
    type: LEAVE_TYPE
  ): Leave
  createQuestion(data: QuestionCreateInput): Question
}

type LeaveFeed {
  leaves: [Leave!]!
  count: Int!
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  role: ROLE!
}

type Subscription {
  newLeave: LeaveSubscriptionPayload
}
